cmake_minimum_required(VERSION 3.12)

set(UNIVERSELAN_DLL_CMAKE_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})

include(determine_galaxy_version_feature_definitions.cmake)
 
function(add_version_definitions_to TARGET)
  string(REPLACE "." "" GALAXY_VERSION_DEF ${GALAXY_VERSION})
  string(REPLACE "x64-" "" GALAXY_VERSION_DEF ${GALAXY_VERSION_DEF})
  string(REPLACE "x86-" "" GALAXY_VERSION_DEF ${GALAXY_VERSION_DEF})

  string(REPLACE "-" " " GALAXY_VERSION_DEF_LIST ${GALAXY_VERSION})
  string(REPLACE "x" ""  GALAXY_VERSION_DEF_LIST ${GALAXY_VERSION_DEF_LIST})
  string(REPLACE "." " " GALAXY_VERSION_DEF_LIST ${GALAXY_VERSION_DEF_LIST})

  separate_arguments(GALAXY_VERSION_DEF_LIST)
  list (GET GALAXY_VERSION_DEF_LIST 0 GALAXY_VERSION_PLATFORM)
  list (GET GALAXY_VERSION_DEF_LIST 1 GALAXY_VERSION_MAJOR)
  list (GET GALAXY_VERSION_DEF_LIST 2 GALAXY_VERSION_MINOR)
  list (GET GALAXY_VERSION_DEF_LIST 3 GALAXY_VERSION_PATCH)

  if("${GALAXY_VERSION_MAJOR}" STREQUAL "0")
    string(SUBSTRING "${GALAXY_VERSION_DEF}" 1 -1 GALAXY_VERSION_DEF)
  endif()

  target_compile_definitions(${TARGET} PUBLIC 
    "GALAXY_VERSION_PLATFORM=${GALAXY_VERSION_PLATFORM}"
    "GALAXY_VERSION_MAJOR=${GALAXY_VERSION_MAJOR}"
    "GALAXY_VERSION_MINOR=${GALAXY_VERSION_MINOR}"
    "GALAXY_VERSION_PATCH=${GALAXY_VERSION_PATCH}"
    "GALAXY_VERSION=${GALAXY_VERSION_DEF}"
# Bug in MSVC, causes warnings
#    "IS_GALAXY_VERSION_GE(MAJOR,MINOR,PATCH)=(((GALAXY_VERSION_MAJOR)>(MAJOR))||(((GALAXY_VERSION_MAJOR)==(MAJOR))&&((GALAXY_VERSION_MINOR)>(MINOR)))||(((GALAXY_VERSION_MAJOR)==(MAJOR))&&((GALAXY_VERSION_MINOR)==(MINOR))&&((GALAXY_VERSION_PATCH)>=(PATCH))))"
  )

  add_feature_definitions_to_target(${TARGET} ${GALAXY_VERSION_MAJOR} ${GALAXY_VERSION_MINOR} ${GALAXY_VERSION_PATCH})
endfunction()

function(add_client_version_rc)
  string(REPLACE "." "" GALAXY_VERSION_DEF ${GALAXY_VERSION})
  string(REPLACE "x64-" "" GALAXY_VERSION_DEF ${GALAXY_VERSION_DEF})
  string(REPLACE "x86-" "" GALAXY_VERSION_DEF ${GALAXY_VERSION_DEF})

  string(REPLACE "-" " " GALAXY_VERSION_DEF_LIST ${GALAXY_VERSION})
  string(REPLACE "x" ""  GALAXY_VERSION_DEF_LIST ${GALAXY_VERSION_DEF_LIST})
  string(REPLACE "." " " GALAXY_VERSION_DEF_LIST ${GALAXY_VERSION_DEF_LIST})

  separate_arguments(GALAXY_VERSION_DEF_LIST)
  list (GET GALAXY_VERSION_DEF_LIST 0 GALAXY_VERSION_PLATFORM)
  list (GET GALAXY_VERSION_DEF_LIST 1 GALAXY_VERSION_MAJOR)
  list (GET GALAXY_VERSION_DEF_LIST 2 GALAXY_VERSION_MINOR)
  list (GET GALAXY_VERSION_DEF_LIST 3 GALAXY_VERSION_PATCH)

  if("${GALAXY_VERSION_MAJOR}" STREQUAL "0")
    string(SUBSTRING "${GALAXY_VERSION_DEF}" 1 -1 GALAXY_VERSION_DEF)
  endif()

  string(TIMESTAMP PROJECT_CURRENT_YEAR "%Y")

  # ${UNIVERSELAN_DLL_CMAKE_CURRENT_SOURCE_DIR} is location of folder below (so version specific one)
  SET(OUT_VERSION_RC_FILE ${UNIVERSELAN_DLL_CMAKE_CURRENT_SOURCE_DIR}/${GALAXY_VERSION_NUMBER}/${GALAXY_ARCH}/versioninfo.rc)
  configure_file(${UNIVERSELAN_DLL_CMAKE_CURRENT_SOURCE_DIR}/versioninfo.rc.cmake.in ${OUT_VERSION_RC_FILE} @ONLY)
  target_sources(universelan-client-${GALAXY_VERSION} PUBLIC ${OUT_VERSION_RC_FILE})
endfunction()

function(define_projects_for_version)
  message("-- Adding Version: ${GALAXY_VERSION}")

  define_galaxy(${GALAXY_VERSION} ${UNIVERSELAN_SDK_INCL_DIR})
  define_shared(${GALAXY_VERSION})
  define_client(${GALAXY_VERSION})
  define_server(${GALAXY_VERSION} ${GALAXY_VERSION_NUMBER} "${ARCH_ADDITION}")
endfunction()

function(add_universelan_executables GALAXY_VERSION_NUMBER)
  set(GALAXY_VERSION "${GALAXY_ARCH}-${GALAXY_VERSION_NUMBER}")
  set(MODULE_DEFINITION_FILE ${UNIVERSELAN_DLL_CMAKE_CURRENT_SOURCE_DIR}/${GALAXY_VERSION_NUMBER}/${GALAXY_ARCH}/UniverseLAN.def)
  set(DLL_FILE ${UNIVERSELAN_DLL_CMAKE_CURRENT_SOURCE_DIR}/${GALAXY_VERSION_NUMBER}/Dll.cxx)
  set(FACTORY_FILE ${UNIVERSELAN_DLL_CMAKE_CURRENT_SOURCE_DIR}/${GALAXY_VERSION_NUMBER}/Factory.cxx)
  set(DLL_HOST_FILE ${UNIVERSELAN_DLL_CMAKE_CURRENT_SOURCE_DIR}/${GALAXY_VERSION_NUMBER}/DllHost.cxx)
  set(FACTORY_HOST_FILE ${UNIVERSELAN_DLL_CMAKE_CURRENT_SOURCE_DIR}/${GALAXY_VERSION_NUMBER}/FactoryHost.cxx)

  set(UNIVERSELAN_OUT_TYPE "DLL")
  set(UNIVERSELAN_SOURCE_CLIENT "${DLL_FILE}")
  set(UNIVERSELAN_SOURCE_HOST "${DLL_HOST_FILE}")
  set(UNIVERSELAN_SDK_INCL_DIR "${UNIVERSELAN_DLL_CMAKE_CURRENT_SOURCE_DIR}/${GALAXY_VERSION_NUMBER}/")

  if(NOT EXISTS "${DLL_FILE}")
    # Switch to FACTORY type if this is not a DLL type
    set(UNIVERSELAN_OUT_TYPE "FACTORY")
    set(UNIVERSELAN_SOURCE_CLIENT "${FACTORY_FILE}")
    set(UNIVERSELAN_SOURCE_HOST "${FACTORY_HOST_FILE}")
  endif()

  if(NOT EXISTS "${MODULE_DEFINITION_FILE}")
    return()
  endif()

  set(ARCH_ADDITION ${GALAXY_ARCH})
  string(REPLACE "x64" "64" ARCH_ADDITION ${ARCH_ADDITION})
  string(REPLACE "x86" "" ARCH_ADDITION ${ARCH_ADDITION})

  define_projects_for_version()

  # Create the .DLL / Shared library
  add_library(universelan-client-${GALAXY_VERSION} SHARED "${UNIVERSELAN_SOURCE_CLIENT}" "${MODULE_DEFINITION_FILE}" )
  target_include_directories(universelan-client-${GALAXY_VERSION} PUBLIC "${UNIVERSELAN_SDK_INCL_DIR}")
  target_compile_definitions(universelan-client-${GALAXY_VERSION} PUBLIC "CLIENT_${UNIVERSELAN_OUT_TYPE}")
  target_link_libraries(universelan-client-${GALAXY_VERSION} PUBLIC universelan-lib-${GALAXY_VERSION})
  set_target_properties(universelan-client-${GALAXY_VERSION} PROPERTIES 
    OUTPUT_NAME "Galaxy${ARCH_ADDITION}"
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/bin/${GALAXY_VERSION_NUMBER}/${UNIVERSELAN_EXTRA_BIN_FOLDER}"
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/bin/${GALAXY_VERSION_NUMBER}/${UNIVERSELAN_EXTRA_BIN_FOLDER}"
  )

  # add version.rc
  add_client_version_rc()

  # Create a simple DLL/SO host
  add_executable(universelan-dllhost-${GALAXY_VERSION}  WIN32  "${UNIVERSELAN_SOURCE_HOST}")
  target_include_directories(universelan-dllhost-${GALAXY_VERSION} PUBLIC "${UNIVERSELAN_SDK_INCL_DIR}")
  target_compile_definitions(universelan-dllhost-${GALAXY_VERSION} PUBLIC "HOST_${UNIVERSELAN_OUT_TYPE}")
  target_link_libraries(universelan-dllhost-${GALAXY_VERSION} PUBLIC universelan-client-${GALAXY_VERSION} )
  set_target_properties(universelan-dllhost-${GALAXY_VERSION} PROPERTIES 
    OUTPUT_NAME "UniverseLANDllHost${ARCH_ADDITION}"
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/bin/${GALAXY_VERSION_NUMBER}/${UNIVERSELAN_EXTRA_BIN_FOLDER}"
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/bin/${GALAXY_VERSION_NUMBER}/${UNIVERSELAN_EXTRA_BIN_FOLDER}"
  )
  set_property(TARGET universelan-dllhost-${GALAXY_VERSION} PROPERTY VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/bin/${GALAXY_VERSION_NUMBER}/Debug/")

  if(NOT MSVC)
    target_link_options(universelan-client-${GALAXY_VERSION} PRIVATE -static-libgcc -static-libstdc++)
    target_link_options(universelan-dllhost-${GALAXY_VERSION} PRIVATE -static-libgcc -static-libstdc++)
  endif()

  file(COPY "${CMAKE_SOURCE_DIR}/Config/" DESTINATION "${CMAKE_SOURCE_DIR}/bin/${GALAXY_VERSION_NUMBER}/Debug/")
  file(COPY "${CMAKE_SOURCE_DIR}/Config/" DESTINATION "${CMAKE_SOURCE_DIR}/bin/${GALAXY_VERSION_NUMBER}/Release/")

endfunction()

MACRO(SUBDIRLIST result curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

SUBDIRLIST(SUBDIRS ${UNIVERSELAN_DLL_CMAKE_CURRENT_SOURCE_DIR})

FOREACH(GALAXY_VERSION_NUMBER ${SUBDIRS})
  set(TOTAL_PATH "${UNIVERSELAN_DLL_CMAKE_CURRENT_SOURCE_DIR}/${GALAXY_VERSION_NUMBER}/${GALAXY_ARCH}")
  if(EXISTS "${TOTAL_PATH}/CMakeLists.txt")
    add_subdirectory(${TOTAL_PATH})
  endif()
ENDFOREACH()
